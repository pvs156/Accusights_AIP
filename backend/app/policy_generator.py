from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from datetime import datetime
import os
import json

class PolicyGenerator:
    def __init__(self, org_data, responses):
        self.org_data = org_data
        self.responses = responses
        self.doc = Document()
        self._setup_document()
    
    def _setup_document(self):
        """Set up document margins and default styles"""
        sections = self.doc.sections
        for section in sections:
            section.top_margin = Inches(1)
            section.bottom_margin = Inches(1)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)
    
    def _add_title(self):
        """Add document title"""
        title = self.doc.add_heading(f"{self.responses.get('q1_company_name', 'Company')} Acceptable Use Policy", level=1)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # Metadata
        meta = self.doc.add_paragraph()
        meta.add_run(f"Effective Date: {datetime.now().strftime('%B %d, %Y')}\n").bold = True
        meta.add_run("Version: 1.0").bold = True
        meta.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        # AccuSights branding
        branding = self.doc.add_paragraph()
        branding_run = branding.add_run("Generated by ")
        accu_run = branding.add_run("ACCU")
        accu_run.bold = True
        accu_run.font.color.rgb = RGBColor(0, 212, 255)  # Cyan color
        sights_run = branding.add_run("SIGHTS")
        sights_run.font.color.rgb = RGBColor(139, 149, 165)  # Gray color
        branding_run2 = branding.add_run(" AI Policy Writer")
        branding.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        for run in [branding_run, branding_run2]:
            run.font.size = Pt(9)
        accu_run.font.size = Pt(10)
        sights_run.font.size = Pt(10)
        
        self.doc.add_paragraph()  # Spacing
    
    def _add_purpose(self):
        """Add purpose section"""
        self.doc.add_heading("1. Purpose", level=2)
        purpose_text = (
            f"This Acceptable Use Policy (AUP) defines the standards for appropriate use of "
            f"{self.responses.get('q1_company_name', 'the organization')}'s information technology "
            f"resources, including but not limited to computers, networks, email systems, internet access, "
            f"and other electronic resources. The purpose of this policy is to protect the organization, "
            f"its employees, and its assets from security threats, legal liability, and reputational damage "
            f"that could result from inappropriate use of IT resources."
        )
        self.doc.add_paragraph(purpose_text)
        self.doc.add_paragraph()
    
    def _add_applicability(self):
        """Add applicability section"""
        self.doc.add_heading("2. Applicability", level=2)
        applicability_text = (
            f"This policy applies to all employees, contractors, consultants, temporary workers, "
            f"and other personnel at {self.responses.get('q1_company_name', 'the organization')}, "
            f"including all personnel affiliated with third parties who have access to the organization's "
            f"information systems and network resources."
        )
        self.doc.add_paragraph(applicability_text)
        
        it_contact = self.responses.get('q7_it_email', 'IT Department')
        it_phone = self.responses.get('q8_it_phone', '')
        contact_text = f"\nFor questions or clarifications regarding this policy, please contact the IT Department at {it_contact}"
        if it_phone:
            contact_text += f" or {it_phone}"
        contact_text += "."
        self.doc.add_paragraph(contact_text)
        self.doc.add_paragraph()
    
    def _add_exceptions(self):
        """Add exceptions section"""
        self.doc.add_heading("3. Exceptions", level=2)
        exceptions_text = (
            "Any exception to this policy must be approved in writing by the IT Department and "
            "appropriate management. All requests for exceptions must include a business justification "
            "and risk assessment. Exceptions will be reviewed on a case-by-case basis and may be subject "
            "to additional security controls or monitoring requirements."
        )
        self.doc.add_paragraph(exceptions_text)
        self.doc.add_paragraph()
    
    def _add_user_responsibilities(self):
        """Add user responsibilities section"""
        self.doc.add_heading("4.1 User Responsibilities", level=3)
        
        responsibilities = []
        
        # Base responsibilities
        responsibilities.append("Users are responsible for safeguarding their credentials and must not share passwords with anyone.")
        
        # Password manager requirement
        if self.responses.get('q11_password_manager') == 'Yes':
            pm_name = self.responses.get('q12_password_manager_name', 'the approved password manager')
            responsibilities.append(f"Users must use {pm_name} to store passwords digitally.")
        else:
            responsibilities.append("Approved password managers must be used to store passwords digitally.")
        
        # MFA requirement
        if self.responses.get('q9_mfa') == 'Yes':
            mfa_name = self.responses.get('q10_mfa_name', 'multi-factor authentication')
            responsibilities.append(f"Users must enable and use {mfa_name} for all applicable systems and applications.")
        else:
            responsibilities.append("Users must enable multi-factor authentication (MFA) where available.")
        
        # Additional responsibilities
        responsibilities.extend([
            "Users must lock their workstations when leaving them unattended, even for short periods.",
            "Users must report any suspected security incidents, policy violations, or unusual system behavior to the IT Department immediately.",
            "Users are responsible for ensuring that company data on their devices is properly secured and backed up according to organizational policies.",
            "Users must comply with all software licensing agreements and only install approved software on company devices.",
            "Users must keep their systems up to date with security patches and updates as directed by the IT Department.",
            "Users must handle sensitive and confidential information in accordance with the organization's data classification policy.",
            "Users must attend required security awareness training and stay informed about current security threats and best practices."
        ])
        
        for i, resp in enumerate(responsibilities, 1):
            p = self.doc.add_paragraph(resp, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_prohibited_use(self):
        """Add prohibited use section"""
        self.doc.add_heading("4.2 Prohibited Use", level=3)
        
        prohibited = [
            "Using company IT resources to access, create, store, transmit, or distribute illegal, offensive, or inappropriate content, including but not limited to pornography, hate speech, or content that violates harassment policies.",
            "Attempting to gain unauthorized access to systems, networks, or data, including password cracking, network sniffing, or exploiting security vulnerabilities.",
            "Installing, distributing, or using unauthorized software, including pirated software, unlicensed applications, or software that has not been approved by the IT Department.",
            "Using company resources for personal commercial purposes, competing business activities, or any activity that creates a conflict of interest.",
            "Transmitting or storing malicious code, including viruses, worms, trojans, or any other malware.",
            "Deliberately wasting IT resources, including excessive personal use that interferes with work duties, sending spam, or engaging in chain letters.",
            "Misrepresenting one's identity in electronic communications, including email spoofing, phishing attempts, or impersonation of other individuals or entities."
        ]
        
        for i, item in enumerate(prohibited, 1):
            self.doc.add_paragraph(item, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_expectations_of_privacy(self):
        """Add expectations of privacy section"""
        self.doc.add_heading("4.3 Expectations of Privacy", level=3)
        
        monitoring = self.responses.get('q21_monitoring', 'Yes, for investigations')
        
        if monitoring in ['Yes, actively', 'Yes, for investigations']:
            privacy_items = [
                f"Users shall have no expectation of privacy when using {self.responses.get('q1_company_name', 'the organization')}'s IT resources. The organization reserves the right to monitor, access, review, and disclose any information stored on or transmitted through company systems.",
                "All electronic communications, including email, internet activity, and file access, may be monitored and logged for security, compliance, and business purposes. Monitoring may occur in real-time or through periodic audits and investigations."
            ]
        else:
            privacy_items = [
                "Users should be aware that certain activities may be monitored for security and compliance purposes, though the organization respects employee privacy to the extent possible.",
                "In the event of a security incident or investigation, the organization reserves the right to access and review relevant system logs and communications."
            ]
        
        for i, item in enumerate(privacy_items, 1):
            self.doc.add_paragraph(item, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_personal_use(self):
        """Add personal use section"""
        self.doc.add_heading("4.4 Personal Use", level=3)
        
        personal_use_level = self.responses.get('q16_personal_use', 'Minimal')
        
        if personal_use_level == 'Prohibited':
            self.doc.add_paragraph("Personal use of company IT resources is strictly prohibited. All use of company devices, networks, and systems must be for legitimate business purposes only.", style='List Number')
        else:
            # Main personal use statement
            use_descriptor = {
                'Minimal': 'minimal and infrequent',
                'Limited': 'limited',
                'Reasonable': 'reasonable'
            }.get(personal_use_level, 'minimal')
            
            p = self.doc.add_paragraph(style='List Number')
            p.add_run(f"{personal_use_level} personal use of company IT resources is permitted, provided that such use:")
            
            # Sub-items
            sub_items = [
                "Does not interfere with work duties or productivity",
                "Does not violate any other provision of this policy",
                "Does not consume excessive system resources or bandwidth",
                "Does not expose the organization to legal, security, or reputational risk"
            ]
            
            for sub_item in sub_items:
                p = self.doc.add_paragraph(sub_item, style='List Bullet')
                # Indent the paragraph
                p.paragraph_format.left_indent = Inches(0.5)
            
            # Conditional sub-policies
            personal_email = self.responses.get('q17_personal_email', 'No')
            personal_websites = self.responses.get('q18_personal_websites', 'No')
            browser_sync = self.responses.get('q19_browser_sync', 'Prohibited')
            cloud_storage = self.responses.get('q20_cloud_storage', 'Prohibited')
            
            additional_items = []
            
            if personal_email == 'No':
                additional_items.append("Accessing personal email accounts on company devices is not permitted.")
            else:
                additional_items.append("Accessing personal email accounts on company devices is permitted for incidental personal use only.")
            
            if personal_websites == 'No':
                additional_items.append("Visiting personal websites unrelated to work is discouraged and should be kept to an absolute minimum.")
            else:
                additional_items.append("Visiting personal websites is permitted during breaks, provided such sites do not contain inappropriate content.")
            
            if browser_sync == 'Prohibited':
                additional_items.append("Browser synchronization features (syncing bookmarks, passwords, history, etc.) must be disabled on company devices.")
            elif browser_sync == 'Enterprise accounts only':
                additional_items.append("Browser synchronization is only permitted when using enterprise-managed accounts. Personal account synchronization is prohibited.")
            else:
                additional_items.append("Browser synchronization is permitted but users should be aware that synced data may be subject to organizational monitoring.")
            
            if cloud_storage == 'Prohibited':
                additional_items.append("Storing company data in personal cloud storage services (Dropbox, Google Drive, OneDrive, etc.) is strictly prohibited.")
            elif cloud_storage == 'Approved platforms only':
                additional_items.append("Company data may only be stored in approved cloud storage platforms as designated by the IT Department. Personal cloud storage services are prohibited for work data.")
            else:
                additional_items.append("When using cloud storage for company data, users must ensure appropriate security controls are in place and must comply with data classification policies.")
            
            for item in additional_items:
                p = self.doc.add_paragraph(item, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_reporting_violations(self):
        """Add reporting violations section"""
        self.doc.add_heading("4.5 Reporting Violations", level=3)
        
        it_contact = self.responses.get('q7_it_email', 'IT Department')
        report_text = (
            f"All users have a responsibility to report suspected violations of this policy. "
            f"Reports should be made to {it_contact} or through the organization's established "
            f"incident reporting channels. Reports can be made anonymously where permitted by law. "
            f"The organization prohibits retaliation against anyone who reports a suspected violation "
            f"in good faith."
        )
        
        self.doc.add_paragraph(report_text, style='List Number')
        self.doc.add_paragraph()
    
    def _add_remote_work(self):
        """Add remote work section with conditional logic"""
        remote_policy = self.responses.get('q14_remote_work', 'Office only')
        
        if remote_policy == 'Office only':
            return  # Skip remote work section entirely
        
        self.doc.add_heading("4.6 Remote Work", level=3)
        
        if remote_policy == 'Not allowed':
            self.doc.add_paragraph("Remote work is not permitted under this policy. All work must be performed from approved company facilities.", style='List Number')
        else:
            # Fully remote or Hybrid
            remote_items = [
                "Remote workers must use secure, encrypted connections (VPN) when accessing company resources from remote locations.",
                "Remote workers must ensure their home network is secured with strong passwords and up-to-date security software.",
                "Remote workers must not allow family members or other unauthorized individuals to use company devices or access company resources.",
                "Remote workers must maintain the same security standards at home as they would in the office, including locking devices when unattended and protecting sensitive information from unauthorized viewing."
            ]
            
            for item in remote_items:
                self.doc.add_paragraph(item, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_byod(self):
        """Add BYOD section with conditional logic"""
        byod_policy = self.responses.get('q23_byod', 'Not allowed')
        has_mdm = self.responses.get('q13_mdm', 'No')
        
        self.doc.add_heading("4.7 Bring Your Own Device (BYOD)", level=3)
        
        if byod_policy == 'Not allowed':
            byod_items = [
                "The use of personal devices for accessing company resources or conducting company business is strictly prohibited.",
                "All work must be performed on company-provided and managed devices.",
                "Employees must not forward work emails to personal accounts, store work files on personal devices, or use personal devices for work-related communications."
            ]
            for item in byod_items:
                self.doc.add_paragraph(item, style='List Number')
        
        elif byod_policy == 'Allowed with MDM':
            if has_mdm == 'Yes':
                byod_items = [
                    "Personal devices may be used for company business only if enrolled in the organization's Mobile Device Management (MDM) solution.",
                    "All personal devices accessing company resources must comply with minimum security requirements, including device encryption, screen lock with PIN/password, and automatic security updates.",
                    "The organization reserves the right to remotely wipe company data from personal devices in the event of device loss, theft, or employee separation.",
                    "Users must immediately report lost or stolen devices that have access to company resources."
                ]
                for item in byod_items:
                    self.doc.add_paragraph(item, style='List Number')
            else:
                # Error condition - should have been caught in frontend but handle gracefully
                self.doc.add_paragraph("BYOD policy configuration error: MDM enrollment required but MDM solution not available. Please contact IT for clarification.", style='List Number')
        
        elif byod_policy == 'Guest network only':
            byod_items = [
                "Personal devices may connect to the organization's guest network for internet access only.",
                "Personal devices are prohibited from accessing internal company resources, file shares, or sensitive systems.",
                "The guest network is isolated from the corporate network and is monitored for security purposes."
            ]
            for item in byod_items:
                self.doc.add_paragraph(item, style='List Number')
        
        self.doc.add_paragraph()
    
    def _add_policy_sections(self):
        """Add main policy section with all subsections"""
        self.doc.add_heading("4. Policy", level=2)
        
        self._add_user_responsibilities()
        self._add_prohibited_use()
        self._add_expectations_of_privacy()
        self._add_personal_use()
        self._add_reporting_violations()
        self._add_remote_work()
        self._add_byod()
    
    def _add_revision_history(self):
        """Add revision history table"""
        self.doc.add_heading("5. Revision History", level=2)
        
        table = self.doc.add_table(rows=2, cols=4)
        table.style = 'Light Grid Accent 1'
        
        # Header row
        header_cells = table.rows[0].cells
        header_cells[0].text = "Version"
        header_cells[1].text = "Date"
        header_cells[2].text = "Description"
        header_cells[3].text = "Author"
        
        # Make header bold
        for cell in header_cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
        
        # Data row
        data_cells = table.rows[1].cells
        data_cells[0].text = "1.0"
        data_cells[1].text = datetime.now().strftime('%m/%d/%Y')
        data_cells[2].text = "Initial release"
        data_cells[3].text = self.responses.get('q7_it_email', 'IT Department')
        
        # Add footer with AccuSights branding
        self.doc.add_paragraph()
        footer = self.doc.add_paragraph()
        footer.add_run("_______________________________________________").font.color.rgb = RGBColor(200, 200, 200)
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        footer_text = self.doc.add_paragraph()
        footer_text.add_run("Policy generated by ").font.size = Pt(8)
        accu = footer_text.add_run("ACCUSIGHTS")
        accu.bold = True
        accu.font.size = Pt(9)
        accu.font.color.rgb = RGBColor(0, 212, 255)
        footer_text.add_run(" | Based on CIS Critical Security Controls").font.size = Pt(8)
        footer_text.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        trademark = self.doc.add_paragraph()
        tm_run = trademark.add_run("© 2025 AccuSights. All rights reserved.")
        tm_run.font.size = Pt(7)
        tm_run.font.color.rgb = RGBColor(128, 128, 128)
        trademark.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    def generate(self, output_path):
        """Generate the complete document"""
        self._add_title()
        self._add_purpose()
        self._add_applicability()
        self._add_exceptions()
        self._add_policy_sections()
        self._add_revision_history()
        
        self.doc.save(output_path)
        return output_path

def generate_policy_document(org_data, responses, output_dir="generated_policies"):
    """
    Main function to generate policy document
    
    Args:
        org_data: Dictionary with organization information
        responses: Dictionary with all questionnaire responses
        output_dir: Directory to save generated documents
    
    Returns:
        Tuple of (filename, full_path)
    """
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with AccuSights branding
    company_name = responses.get('q1_company_name', 'Company').replace(' ', '_')
    year = datetime.now().year
    filename = f"{company_name}_Acceptable_Use_Policy_AccuSights_{year}.docx"
    output_path = os.path.join(output_dir, filename)
    
    # Generate document
    generator = PolicyGenerator(org_data, responses)
    generator.generate(output_path)
    
    return filename, output_path

